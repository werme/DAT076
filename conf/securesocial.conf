#####################################################################################
#
# SecureSocial 2 Settings
#
#####################################################################################

smtp {
    host=smtp.gmail.com
    #port=25
    ssl=true
    user="your_user"
    password=your_password
    from="your_from_address"
}

securesocial {
        #
        # If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
        #
        #bootstrapCssPath="your path"
 

        #
        # If enabled, sets the Favicon to display when in SecureSocial pages
        #
        #faviconPath="your path"
  

        #
        # If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
        #
        #jqueryPath="your path"


        #
        # If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations
        # If you want to do major changes, please read about custom templates in SecureSocial
        #
        #customCssPath="your path"

    #
    # Where to redirect the user if SecureSocial can't figure that out from
    # the request that led the use to the login page
    #
    onLoginGoTo=/

    #
    # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
    #
    onLogoutGoTo=/login

    #
    # Enable SSL for oauth callback urls, login/signup/password recovery pages and the authenticator cookie
    #
    ssl=false


    #
    # Parameters for the cookie used to track users.
    #   
    cookie {
        # 
        # The cookie name (defaults to 'id')
        #name=id

        #
        # The path for which the cookie should be sent by the browser (defaults to /)
        #
        #path=/

        #
        # The domain for which the cookie should be sent (it is left empty by default)
        #
        #domain=some_domain

        #
        # If set to true, the cookie is not readable by a client side script (defaults to true).
        #
        #httpOnly=true

        #
            # The amount of time the session id will remain valid since the last request
        #
        idleTimeoutInMinutes=30

        #
        # The amount of time the session id will be valid since the user authenticated. 
        # After this the user will need to re-authenticate
        #
        absoluteTimeOutInMinutes=720
    }

    twitter {
        requestTokenUrl="https://twitter.com/oauth/request_token"
        accessTokenUrl="https://twitter.com/oauth/access_token"
        authorizationUrl="https://twitter.com/oauth/authenticate"
        consumerKey=DwuPHfLMDYhiYNnDXqViw
        consumerSecret=BaWs0Unm7edEAh9RufFDkrLQRnD9MumYnGSOwJn8
    }

    facebook {
        authorizationUrl="https://graph.facebook.com/oauth/authorize"
        accessTokenUrl="https://graph.facebook.com/oauth/access_token"
        clientId=222955594530311
        clientSecret=922e0d757c3283c79a583b93b9d42008
        # this scope is the minimum SecureSocial requires.  You can add more if required by your app.
        scope=email
    }

    google {
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        clientId=your_client_id
        clientSecret=your_client_secret
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
    }

    linkedin {
        requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken"
        accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
        authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
        consumerKey=your_consumer_key
        consumerSecret=your_consumer_secret
    }
        
    github {
        authorizationUrl="https://github.com/login/oauth/authorize"
        accessTokenUrl="https://github.com/login/oauth/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
    }

    foursquare {
            authorizationUrl="https://foursquare.com/oauth2/authenticate"
            accessTokenUrl="https://foursquare.com/oauth2/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
        }

    xing {
        requestTokenUrl="https://api.xing.com/v1/request_token"
            accessTokenUrl="https://api.xing.com/v1/access_token"
            authorizationUrl="https://api.xing.com/v1/authorize"
        consumerKey=your_consumer_key
        consumerSecret=your_consumer_secret
        }

    instagram {
            authorizationUrl="https://api.instagram.com/oauth/authorize"
        accessTokenUrl="https://api.instagram.com/oauth/access_token"
        clientId=6d3ec170dc3840bda24a17d503266919
        clientSecret=c085555116264e2e881f10d080a65f3b
    }

    vk {
                authorizationUrl="http://oauth.vk.com/authorize"
            accessTokenUrl="https://oauth.vk.com/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
        }

    userpass {
        #
        # Enable username support, otherwise SecureSocial will use the emails as user names
        #
        withUserNameSupport=true
        sendWelcomeEmail=true
        enableGravatarSupport=true
        tokenDuration=60
        tokenDeleteInterval=5
        signupSkipLogin=false
    }
}